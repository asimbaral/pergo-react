[{"C:\\Programming Files\\pergo-react\\spotify-clone-app\\src\\index.js":"1","C:\\Programming Files\\pergo-react\\spotify-clone-app\\src\\App.js":"2","C:\\Programming Files\\pergo-react\\spotify-clone-app\\src\\reportWebVitals.js":"3","C:\\Programming Files\\pergo-react\\spotify-clone-app\\src\\components\\TodoList.js":"4","C:\\Programming Files\\pergo-react\\spotify-clone-app\\src\\components\\PostList.js":"5","C:\\Programming Files\\pergo-react\\spotify-clone-app\\src\\components\\Form.js":"6","C:\\Programming Files\\pergo-react\\spotify-clone-app\\src\\components\\Post.js":"7","C:\\Programming Files\\pergo-react\\spotify-clone-app\\src\\components\\Todo.js":"8","C:\\Programming Files\\pergo-react\\spotify-clone-app\\src\\components\\Hello.js":"9"},{"size":500,"mtime":499162500000,"results":"10","hashOfConfig":"11"},{"size":2689,"mtime":1622087447489,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":499162500000,"results":"13","hashOfConfig":"11"},{"size":427,"mtime":1607574431452,"results":"14","hashOfConfig":"11"},{"size":397,"mtime":1621923865347,"results":"15","hashOfConfig":"11"},{"size":1764,"mtime":1620958179178,"results":"16","hashOfConfig":"11"},{"size":4830,"mtime":1621925389204,"results":"17","hashOfConfig":"11"},{"size":980,"mtime":1607472902988,"results":"18","hashOfConfig":"11"},{"size":174,"mtime":1622083821678,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1esyysg",{"filePath":"23","messages":"24","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"22"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"C:\\Programming Files\\pergo-react\\spotify-clone-app\\src\\index.js",[],["41","42"],"C:\\Programming Files\\pergo-react\\spotify-clone-app\\src\\App.js",["43","44"],"C:\\Programming Files\\pergo-react\\spotify-clone-app\\src\\reportWebVitals.js",[],"C:\\Programming Files\\pergo-react\\spotify-clone-app\\src\\components\\TodoList.js",[],"C:\\Programming Files\\pergo-react\\spotify-clone-app\\src\\components\\PostList.js",["45","46"],"import React from 'react';\r\nimport {Route, BrowserRouter as Router} from 'react-router-dom';\r\n\r\nimport Post from './Post'\r\nconst PostList = ({posts}) => {\r\n    return (\r\n        <div className=\"mews\">\r\n          {posts.slice(0).map(post => (\r\n            <Post post={post} key={post._id} onClick={console.log(\":::::\")}/>\r\n          ))}\r\n        </div>\r\n    \r\n    );\r\n};\r\n\r\nexport default PostList;","C:\\Programming Files\\pergo-react\\spotify-clone-app\\src\\components\\Form.js",[],"C:\\Programming Files\\pergo-react\\spotify-clone-app\\src\\components\\Post.js",["47"],"import React, { useState }  from 'react';\r\nimport Modal from \"react-modal\";\r\n\r\nimport { FacebookIcon, TwitterIcon, LinkedinIcon } from \"react-share\";\r\nimport { FacebookShareButton, TwitterShareButton, LinkedinShareButton } from \"react-share\";\r\nModal.setAppElement(\"#root\");\r\nconst Post = ({post}) => {\r\n    const [likeCount, setLikeCount] = useState(post.likes);\r\n    const [likeUpdateCount, setLikeUpdateCount] = useState(1);\r\n    const [commentCount, setCommentCount] = useState(post.comments.length);\r\n    const [shareCount, setShareCount] = useState(post.shares);\r\n    const [modalIsOpen, setModalIsOpen] = useState(false);\r\n    const [shareModalIsOpen, setShareModalIsOpen] = useState(false);\r\n\r\n    const initialList = [];\r\n    post.comments.forEach((comment) => {\r\n      initialList.push(<li>{comment}</li>);\r\n    });\r\n\r\n    const [commentList, setCommentList] = useState(initialList);\r\n    const [currentComment, setCurrentComment] = useState(\"\");\r\n\r\n    const apiURL = \"http://localhost:8080/api/posts/\";\r\n    const likeAction = () => {\r\n        const likeUpdate = {\r\n          \"likes\": (post.likes + likeUpdateCount)\r\n        };\r\n        fetch((apiURL + post._id), {\r\n          method: 'PUT',\r\n          body: JSON.stringify(likeUpdate),\r\n          headers: {\r\n              'content-type': 'application/json'\r\n          }\r\n        }).then(e => {\r\n          setLikeCount(post.likes + likeUpdateCount);\r\n          post.likes = post.likes + likeUpdateCount;\r\n          const upc = (likeUpdateCount === 1) ? -1 : 1;\r\n          setLikeUpdateCount(upc);\r\n        });\r\n    }\r\n\r\n    function toggleModal() {\r\n      setModalIsOpen(!modalIsOpen);\r\n    }\r\n\r\n    function toggleShareModal() {\r\n      setShareModalIsOpen(!shareModalIsOpen);\r\n    }\r\n\r\n    const postDate = (new Date(post.createdAt));\r\n\r\n    function sendComment(e) {\r\n      e.preventDefault();\r\n      console.log(\"here\");\r\n      const commentUpdate = {\r\n        \"recentComment\": currentComment\r\n      };\r\n      fetch((apiURL + post._id), {\r\n        method: 'PUT',\r\n        body: JSON.stringify(commentUpdate),\r\n        headers: {\r\n            'content-type': 'application/json'\r\n        }\r\n      }).then(e => {\r\n        console.log(e);\r\n        commentList.push(<li>{currentComment}</li>);\r\n        setCommentCount(commentList);\r\n        setCommentList(commentList);\r\n        setCurrentComment(\"\");\r\n      });\r\n    }\r\n\r\n    return (\r\n        <div className=\"post\" onClick={console.log(\":::::::\")}>\r\n          <footer className=\"postHeader\">\r\n              <h4>{post.type}</h4>\r\n              <h2>{postDate.getMonth() + \"-\" + postDate.getDate() + \"-\" + postDate.getFullYear()}</h2>\r\n          </footer>\r\n          <p>{post.content}</p>\r\n          <footer className=\"postBottom\">\r\n            <i class=\"far fa-heart\" onClick={likeAction}></i>\r\n            <i class=\"far fa-comments\" onClick={toggleModal}></i>\r\n            <i class=\"far fa-share-square\" onClick={toggleShareModal}></i>\r\n          </footer>\r\n          <footer className=\"postStat\">\r\n            <h5>{likeCount}</h5>\r\n            <h5>{commentCount}</h5>\r\n            <h5>{shareCount}</h5>\r\n          </footer>\r\n          <Modal isOpen={modalIsOpen} onRequestClose={toggleModal} contentLabel={post.name + \"'s post\"}>\r\n            <h6>{post.name + \"'s post\"}</h6>\r\n            <p>{post.content}</p>\r\n            <form>\r\n              <textarea value={currentComment} onChange={event => setCurrentComment(event.target.value)}>Enter comment here</textarea>\r\n              <button onClick={sendComment}>Submit</button>\r\n            </form>\r\n            <button onClick={toggleModal}>Close</button>\r\n            <div>\r\n              {commentList}\r\n            </div>\r\n          </Modal>\r\n\r\n          <Modal isOpen={shareModalIsOpen} onRequestClose={toggleShareModal} contentLabel={post.name + \"'s post\"}>\r\n            <div class=\"shares\">\r\n              <FacebookShareButton\r\n                url=\"https://www.google.com\"\r\n                quote={post.content}\r\n              >\r\n                <FacebookIcon logoFillColor=\"white\" round={true}></FacebookIcon>\r\n              </FacebookShareButton>\r\n\r\n              <TwitterShareButton\r\n                url=\"https://www.google.com\"\r\n                via={post.content}\r\n              >\r\n                <TwitterIcon logoFillColor=\"white\" round={true}></TwitterIcon>\r\n              </TwitterShareButton>\r\n\r\n              <LinkedinShareButton\r\n                url=\"https://www.google.com\"\r\n                title=\"Test Post\"\r\n                summary ={post.content}\r\n              >\r\n                <LinkedinIcon logoFillColor=\"white\" round={true}></LinkedinIcon>\r\n              </LinkedinShareButton>\r\n\r\n            </div>\r\n            <button onClick={toggleShareModal}>Close</button>\r\n          </Modal>\r\n\r\n        </div>\r\n    \r\n    );\r\n}\r\n\r\nexport default Post;","C:\\Programming Files\\pergo-react\\spotify-clone-app\\src\\components\\Todo.js",[],"C:\\Programming Files\\pergo-react\\spotify-clone-app\\src\\components\\Hello.js",[],{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","severity":1,"message":"53","line":9,"column":8,"nodeType":"54","messageId":"55","endLine":9,"endColumn":13},{"ruleId":"56","severity":1,"message":"57","line":27,"column":6,"nodeType":"58","endLine":27,"endColumn":21,"suggestions":"59"},{"ruleId":"52","severity":1,"message":"60","line":2,"column":9,"nodeType":"54","messageId":"55","endLine":2,"endColumn":14},{"ruleId":"52","severity":1,"message":"61","line":2,"column":33,"nodeType":"54","messageId":"55","endLine":2,"endColumn":39},{"ruleId":"52","severity":1,"message":"62","line":11,"column":24,"nodeType":"54","messageId":"55","endLine":11,"endColumn":37},"no-native-reassign",["63"],"no-negated-in-lhs",["64"],"no-unused-vars","'Hello' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'filterHandler' and 'saveLocalTodos'. Either include them or remove the dependency array.","ArrayExpression",["65"],"'Route' is defined but never used.","'Router' is defined but never used.","'setShareCount' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"66","fix":"67"},"Update the dependencies array to be: [todos, status, filterHandler, saveLocalTodos]",{"range":"68","text":"69"},[805,820],"[todos, status, filterHandler, saveLocalTodos]"]